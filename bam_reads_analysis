### install a new package; you only need to do this once.
  #.libPaths("/sfs/gpfs/tardis/home/ejy4bu/R/goolf/4.5/")
  #cat("R library paths:", .libPaths(), "\n")
  
  if (!require("BiocManager", quietly = TRUE))
      install.packages("BiocManager")

  BiocManager::install("Rsamtools")

### libraries
  library(ggplot2)
  library(data.table)
  library(foreach)
  library(doMC)
  registerDoMC(10)
  library(Rsamtools)

### changed cores from 2 to 10

### this
### specify the bam file
  fl <- system("ls -d /scratch/ejy4bu/compBio/bams/*/*/*.dedup.bam", intern=T)
  fl <- fl[1]
  length(fl)
  ###/scratch/ejy4bu/compBio/bams/Robert_samples_bams/RobertUK_G9/RobertUK_G9.dedup.bam"

### How many reads map to each chromosome?
  rd <- foreach(bamFile=fl, .combine="rbind")%dopar%{
    ## bamFile=fl[1]

    ### tell me what file we are working on
      message("Processing: ", bamFile)

    ### get the information about number of reads for each chromosome
      if(!file.exists(paste(bamFile, ".bai", sep=""))) indexBam(bamFile)
      stats <- as.data.table(idxstatsBam(bamFile))

    ### we need to subset to the main autosomal arms of melanogaster and simulans
      setkey(stats, seqnames)
      chr <- c("SIDB01000001.1","SIDB01000002.1","SIDB01000003.1","SIDB01000004.1",
      "SIDB01000005.1","SIDB01000006.1","SIDB01000007.1","SIDB01000008.1","SIDB01000009.1",
      "SIDB01000010.1","SIDB01000011.1","SIDB01000012.1","SIDB01000013.1","SIDB01000014.1")
      stats_small <- stats[J(chr)]
      stats_small[,species:="pulex"]
      #stats_small[!grepl("sim", seqnames),species:="mel"]

    ### this command aggregates the data. For each unique value of species, we calculate the total number of mapped reads.
      stats_small.ag <- stats_small[,list(mapped=sum(mapped), seqlength=sum(seqlength)), list(species)]

    ### format output
      out <- data.table(
        propPulex= stats_small.ag[species=="pulex"]$mapped/sum( stats_small.ag$mapped)
      )

      #out[,nPulex:=as.numeric(tstrsplit(bamFile, "\\.")[[8]])]
      #out[,nMel:=as.numeric(tstrsplit(bamFile, "\\.")[[10]])]
      #out[,samp:=last(tstrsplit(bamFile, "/"))]

    ### return output
      return(out)
  }
  #rd[,realProp:=nSim/(nSim+nMel)]
  rd
  summary(rd$propPulex)

### estimated vs real
  #ggplot(data=rd, aes(x=realProp, y=propSim)) + geom_point()